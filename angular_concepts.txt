dependency injection: 
giving function an object, rather creating and passing

$scope: it is an object of the scope service


myApp.controller('mainController',function($scope,$log){//$scope is an object and $ is a part of varible name. All angular js services start with a $ sign. 
    
    
    
    
    
    
    
    
    
    //angular js will look at the arguments passed to controller function and analyses those arguments and will bind the angular js dependency services if any of the arguments match.
//    console.log($log);
    //outputs an object with the following functon methds {log: ƒ, info: ƒ, warn: ƒ, error: ƒ, debug: ƒ}
//    $log.debug("code debug");
//    $log.info("log info");
//    $log.warn("warning");
//    $log.error("error");
//    
    
    //adding properties to the $scope 
//    $scope.name = "santosh";
//    $scope.occupation= "developer";
//    console.log($scope);
    // now you can use this values inside the index.html where this is used as a controller. 
    //$scope is the one which establises the pipe between the model and view
    //when you console it out you can see an object in the browser console, this is because it is an angular js object that it injects it into the function.
    //basically this is model(data) that the view(html) needs and the angular js binds them togeather  
});//place to put the code associated with this controller